// +build !ignore_autogenerated

// Copyright (c) 2016-2017 Tigera, Inc. All rights reserved.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v3

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeer":                            schema_libcalico_go_lib_apis_v1_BGPPeer(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerList":                        schema_libcalico_go_lib_apis_v1_BGPPeerList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerMetadata":                    schema_libcalico_go_lib_apis_v1_BGPPeerMetadata(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerSpec":                        schema_libcalico_go_lib_apis_v1_BGPPeerSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfig":                    schema_libcalico_go_lib_apis_v1_CalicoAPIConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigMetadata":            schema_libcalico_go_lib_apis_v1_CalicoAPIConfigMetadata(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigSpec":                schema_libcalico_go_lib_apis_v1_CalicoAPIConfigSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort":                       schema_libcalico_go_lib_apis_v1_EndpointPort(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.EntityRule":                         schema_libcalico_go_lib_apis_v1_EntityRule(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.EtcdConfig":                         schema_libcalico_go_lib_apis_v1_EtcdConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpoint":                       schema_libcalico_go_lib_apis_v1_HostEndpoint(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointList":                   schema_libcalico_go_lib_apis_v1_HostEndpointList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointMetadata":               schema_libcalico_go_lib_apis_v1_HostEndpointMetadata(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointSpec":                   schema_libcalico_go_lib_apis_v1_HostEndpointSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.ICMPFields":                         schema_libcalico_go_lib_apis_v1_ICMPFields(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration":                  schema_libcalico_go_lib_apis_v1_IPIPConfiguration(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPNAT":                              schema_libcalico_go_lib_apis_v1_IPNAT(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPool":                             schema_libcalico_go_lib_apis_v1_IPPool(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolList":                         schema_libcalico_go_lib_apis_v1_IPPoolList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolMetadata":                     schema_libcalico_go_lib_apis_v1_IPPoolMetadata(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolSpec":                         schema_libcalico_go_lib_apis_v1_IPPoolSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.KubeConfig":                         schema_libcalico_go_lib_apis_v1_KubeConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.Node":                               schema_libcalico_go_lib_apis_v1_Node(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeBGPSpec":                        schema_libcalico_go_lib_apis_v1_NodeBGPSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeList":                           schema_libcalico_go_lib_apis_v1_NodeList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeMetadata":                       schema_libcalico_go_lib_apis_v1_NodeMetadata(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeSpec":                           schema_libcalico_go_lib_apis_v1_NodeSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.OrchRef":                            schema_libcalico_go_lib_apis_v1_OrchRef(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.Policy":                             schema_libcalico_go_lib_apis_v1_Policy(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.PolicyList":                         schema_libcalico_go_lib_apis_v1_PolicyList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.PolicyMetadata":                     schema_libcalico_go_lib_apis_v1_PolicyMetadata(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.PolicySpec":                         schema_libcalico_go_lib_apis_v1_PolicySpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.Profile":                            schema_libcalico_go_lib_apis_v1_Profile(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileList":                        schema_libcalico_go_lib_apis_v1_ProfileList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileMetadata":                    schema_libcalico_go_lib_apis_v1_ProfileMetadata(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileSpec":                        schema_libcalico_go_lib_apis_v1_ProfileSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.Rule":                               schema_libcalico_go_lib_apis_v1_Rule(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpoint":                   schema_libcalico_go_lib_apis_v1_WorkloadEndpoint(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointList":               schema_libcalico_go_lib_apis_v1_WorkloadEndpointList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointMetadata":           schema_libcalico_go_lib_apis_v1_WorkloadEndpointMetadata(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointSpec":               schema_libcalico_go_lib_apis_v1_WorkloadEndpointSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.AllocationAttribute":                schema_libcalico_go_lib_apis_v3_AllocationAttribute(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.AutoHostEndpointConfig":             schema_libcalico_go_lib_apis_v3_AutoHostEndpointConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfiguration":                   schema_libcalico_go_lib_apis_v3_BGPConfiguration(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationList":               schema_libcalico_go_lib_apis_v3_BGPConfigurationList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationSpec":               schema_libcalico_go_lib_apis_v3_BGPConfigurationSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPassword":                        schema_libcalico_go_lib_apis_v3_BGPPassword(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeer":                            schema_libcalico_go_lib_apis_v3_BGPPeer(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerList":                        schema_libcalico_go_lib_apis_v3_BGPPeerList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerSpec":                        schema_libcalico_go_lib_apis_v3_BGPPeerSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinity":                      schema_libcalico_go_lib_apis_v3_BlockAffinity(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinityList":                  schema_libcalico_go_lib_apis_v3_BlockAffinityList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinitySpec":                  schema_libcalico_go_lib_apis_v3_BlockAffinitySpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformation":                 schema_libcalico_go_lib_apis_v3_ClusterInformation(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformationList":             schema_libcalico_go_lib_apis_v3_ClusterInformationList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformationSpec":             schema_libcalico_go_lib_apis_v3_ClusterInformationSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.Community":                          schema_libcalico_go_lib_apis_v3_Community(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ControllersConfig":                  schema_libcalico_go_lib_apis_v3_ControllersConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort":                       schema_libcalico_go_lib_apis_v3_EndpointPort(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.EntityRule":                         schema_libcalico_go_lib_apis_v3_EntityRule(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfiguration":                 schema_libcalico_go_lib_apis_v3_FelixConfiguration(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfigurationList":             schema_libcalico_go_lib_apis_v3_FelixConfigurationList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfigurationSpec":             schema_libcalico_go_lib_apis_v3_FelixConfigurationSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicy":                schema_libcalico_go_lib_apis_v3_GlobalNetworkPolicy(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicyList":            schema_libcalico_go_lib_apis_v3_GlobalNetworkPolicyList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicySpec":            schema_libcalico_go_lib_apis_v3_GlobalNetworkPolicySpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSet":                   schema_libcalico_go_lib_apis_v3_GlobalNetworkSet(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetList":               schema_libcalico_go_lib_apis_v3_GlobalNetworkSetList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSpec":               schema_libcalico_go_lib_apis_v3_GlobalNetworkSetSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPMatch":                          schema_libcalico_go_lib_apis_v3_HTTPMatch(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPPath":                           schema_libcalico_go_lib_apis_v3_HTTPPath(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpoint":                       schema_libcalico_go_lib_apis_v3_HostEndpoint(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointList":                   schema_libcalico_go_lib_apis_v3_HostEndpointList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointSpec":                   schema_libcalico_go_lib_apis_v3_HostEndpointSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ICMPFields":                         schema_libcalico_go_lib_apis_v3_ICMPFields(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlock":                          schema_libcalico_go_lib_apis_v3_IPAMBlock(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlockList":                      schema_libcalico_go_lib_apis_v3_IPAMBlockList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlockSpec":                      schema_libcalico_go_lib_apis_v3_IPAMBlockSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfig":                         schema_libcalico_go_lib_apis_v3_IPAMConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfigList":                     schema_libcalico_go_lib_apis_v3_IPAMConfigList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfigSpec":                     schema_libcalico_go_lib_apis_v3_IPAMConfigSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandle":                         schema_libcalico_go_lib_apis_v3_IPAMHandle(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandleList":                     schema_libcalico_go_lib_apis_v3_IPAMHandleList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandleSpec":                     schema_libcalico_go_lib_apis_v3_IPAMHandleSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPNAT":                              schema_libcalico_go_lib_apis_v3_IPNAT(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPool":                             schema_libcalico_go_lib_apis_v3_IPPool(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolList":                         schema_libcalico_go_lib_apis_v3_IPPoolList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolSpec":                         schema_libcalico_go_lib_apis_v3_IPPoolSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfiguration":       schema_libcalico_go_lib_apis_v3_KubeControllersConfiguration(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfigurationList":   schema_libcalico_go_lib_apis_v3_KubeControllersConfigurationList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfigurationSpec":   schema_libcalico_go_lib_apis_v3_KubeControllersConfigurationSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfigurationStatus": schema_libcalico_go_lib_apis_v3_KubeControllersConfigurationStatus(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NamespaceControllerConfig":          schema_libcalico_go_lib_apis_v3_NamespaceControllerConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicy":                      schema_libcalico_go_lib_apis_v3_NetworkPolicy(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicyList":                  schema_libcalico_go_lib_apis_v3_NetworkPolicyList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicySpec":                  schema_libcalico_go_lib_apis_v3_NetworkPolicySpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSet":                         schema_libcalico_go_lib_apis_v3_NetworkSet(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSetList":                     schema_libcalico_go_lib_apis_v3_NetworkSetList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSetSpec":                     schema_libcalico_go_lib_apis_v3_NetworkSetSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.Node":                               schema_libcalico_go_lib_apis_v3_Node(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeAddress":                        schema_libcalico_go_lib_apis_v3_NodeAddress(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeBGPSpec":                        schema_libcalico_go_lib_apis_v3_NodeBGPSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeControllerConfig":               schema_libcalico_go_lib_apis_v3_NodeControllerConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeList":                           schema_libcalico_go_lib_apis_v3_NodeList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeSpec":                           schema_libcalico_go_lib_apis_v3_NodeSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeStatus":                         schema_libcalico_go_lib_apis_v3_NodeStatus(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeWireguardSpec":                  schema_libcalico_go_lib_apis_v3_NodeWireguardSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.OrchRef":                            schema_libcalico_go_lib_apis_v3_OrchRef(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.PolicyControllerConfig":             schema_libcalico_go_lib_apis_v3_PolicyControllerConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.PrefixAdvertisement":                schema_libcalico_go_lib_apis_v3_PrefixAdvertisement(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.Profile":                            schema_libcalico_go_lib_apis_v3_Profile(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ProfileList":                        schema_libcalico_go_lib_apis_v3_ProfileList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ProfileSpec":                        schema_libcalico_go_lib_apis_v3_ProfileSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ProtoPort":                          schema_libcalico_go_lib_apis_v3_ProtoPort(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.RouteTableRange":                    schema_libcalico_go_lib_apis_v3_RouteTableRange(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.Rule":                               schema_libcalico_go_lib_apis_v3_Rule(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.RuleMetadata":                       schema_libcalico_go_lib_apis_v3_RuleMetadata(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceAccountControllerConfig":     schema_libcalico_go_lib_apis_v3_ServiceAccountControllerConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceAccountMatch":                schema_libcalico_go_lib_apis_v3_ServiceAccountMatch(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceClusterIPBlock":              schema_libcalico_go_lib_apis_v3_ServiceClusterIPBlock(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceExternalIPBlock":             schema_libcalico_go_lib_apis_v3_ServiceExternalIPBlock(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceLoadBalancerIPBlock":         schema_libcalico_go_lib_apis_v3_ServiceLoadBalancerIPBlock(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpoint":                   schema_libcalico_go_lib_apis_v3_WorkloadEndpoint(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointControllerConfig":   schema_libcalico_go_lib_apis_v3_WorkloadEndpointControllerConfig(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointList":               schema_libcalico_go_lib_apis_v3_WorkloadEndpointList(ref),
		"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointSpec":               schema_libcalico_go_lib_apis_v3_WorkloadEndpointSpec(ref),
		"github.com/projectcalico/libcalico-go/lib/numorstring.Port":                           schema_projectcalico_libcalico_go_lib_numorstring_Port(ref),
		"github.com/projectcalico/libcalico-go/lib/numorstring.Protocol":                       schema_projectcalico_libcalico_go_lib_numorstring_Protocol(ref),
		"github.com/projectcalico/libcalico-go/lib/numorstring.Uint8OrString":                  schema_projectcalico_libcalico_go_lib_numorstring_Uint8OrString(ref),
	}
}

func schema_libcalico_go_lib_apis_v1_BGPPeer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPPeer contains information about a BGP peer resource that is a peer of a Calico compute node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata for a BGPPeer.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerMetadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification for a BGPPeer.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerSpec"),
						},
					},
				},
				Required: []string{"TypeMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeerSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_BGPPeerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPPeerList contains a list of BGP Peer resources.  List types are returned from List() enumerations in the client interface.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeer"),
									},
								},
							},
						},
					},
				},
				Required: []string{"TypeMetadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.BGPPeer", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_BGPPeerMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPPeerMetadata contains the metadata for a BGPPeer resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ObjectMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
						},
					},
					"scope": {
						SchemaProps: spec.SchemaProps{
							Description: "The scope of the peer.  This may be global or node.  A global peer is a BGP device that peers with all Calico nodes.  A node peer is a BGP device that peers with the specified Calico node (specified by the node hostname).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"node": {
						SchemaProps: spec.SchemaProps{
							Description: "The node name identifying the Calico node instance that is peering with this peer. When modifying a BGP peer, the node must be specified when the scope is `node`, and must be omitted when the scope is `global`.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address of the peer.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
						},
					},
				},
				Required: []string{"ObjectMetadata", "scope", "peerIP"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata", "github.com/projectcalico/libcalico-go/lib/net.IP"},
	}
}

func schema_libcalico_go_lib_apis_v1_BGPPeerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPPeerSpec contains the specification for a BGPPeer resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"asNumber": {
						SchemaProps: spec.SchemaProps{
							Description: "The AS Number of the peer.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"asNumber"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v1_CalicoAPIConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CalicoAPIConfig contains the connection information for a Calico CalicoAPIConfig resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigMetadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigSpec"),
						},
					},
				},
				Required: []string{"TypeMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.CalicoAPIConfigSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_CalicoAPIConfigMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CalicoAPIConfigMetadata contains the metadata for a Calico CalicoAPIConfig resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ObjectMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
						},
					},
				},
				Required: []string{"ObjectMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_CalicoAPIConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CalicoAPIConfigSpec contains the specification for a Calico CalicoAPIConfig resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"datastoreType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"EtcdConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Inline the ectd config fields",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EtcdConfig"),
						},
					},
					"KubeConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Inline the k8s config fields.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.KubeConfig"),
						},
					},
				},
				Required: []string{"datastoreType", "EtcdConfig", "KubeConfig"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.EtcdConfig", "github.com/projectcalico/libcalico-go/lib/apis/v1.KubeConfig"},
	}
}

func schema_libcalico_go_lib_apis_v1_EndpointPort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"name", "protocol", "port"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"},
	}
}

func schema_libcalico_go_lib_apis_v1_EntityRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "An EntityRule is a sub-component of a Rule comprising the match criteria specific to a particular entity (that is either the source or destination).\n\nA source EntityRule matches the source endpoint and originating traffic. A destination EntityRule matches the destination endpoint and terminating traffic.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Tag is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) endpoints that have profiles with the given tag in them.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"net": {
						SchemaProps: spec.SchemaProps{
							Description: "Net is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in the given subnet. Deprecated: superseded by the Nets field.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
						},
					},
					"nets": {
						SchemaProps: spec.SchemaProps{
							Description: "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched.\n\nNote that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match:\n\n\tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled\n\tendpoints that do not have the label \"my_label\".\n\n\tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled\n\tendpoints that do have the label \"my_label\".\n\nThe effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports.\n\nSince only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"tcp\" or \"udp\".",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
									},
								},
							},
						},
					},
					"notTag": {
						SchemaProps: spec.SchemaProps{
							Description: "NotTag is the negated version of the Tag field.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"notNet": {
						SchemaProps: spec.SchemaProps{
							Description: "NotNet is an optional field that restricts the rule to only apply to traffic that does not originate from (or terminate at) an IP address in the given subnet. Deprecated: superseded by NotNets.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
						},
					},
					"notNets": {
						SchemaProps: spec.SchemaProps{
							Description: "NotNets is an optional field that restricts the rule to only apply to traffic that does not originate from (or terminate at) an IP address in any of the given subnets.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
									},
								},
							},
						},
					},
					"notSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"notPorts": {
						SchemaProps: spec.SchemaProps{
							Description: "NotPorts is the negated version of the Ports field.\n\nSince only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"tcp\" or \"udp\".",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/net.IPNet", "github.com/projectcalico/libcalico-go/lib/numorstring.Port"},
	}
}

func schema_libcalico_go_lib_apis_v1_EtcdConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"etcdScheme": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etcdAuthority": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etcdEndpoints": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etcdDiscoverySrv": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etcdUsername": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etcdPassword": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etcdKeyFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etcdCertFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"etcdCACertFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"etcdScheme", "etcdAuthority", "etcdEndpoints", "etcdDiscoverySrv", "etcdUsername", "etcdPassword", "etcdKeyFile", "etcdCertFile", "etcdCACertFile"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v1_HostEndpoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostEndpoint contains information about a \"bare-metal\" interfaces attached to the host that is running Calico's agent, Felix. By default, Calico doesn't apply any policy to such interfaces.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointMetadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointSpec"),
						},
					},
				},
				Required: []string{"TypeMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpointSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_HostEndpointList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostEndpointList contains a list of Host Endpoint resources.  List types are returned from List() enumerations in the client interface.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpoint"),
									},
								},
							},
						},
					},
				},
				Required: []string{"TypeMetadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.HostEndpoint", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_HostEndpointMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostEndpointMetadata contains the Metadata for a HostEndpoint resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ObjectMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the endpoint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"node": {
						SchemaProps: spec.SchemaProps{
							Description: "The node name identifying the Calico node instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "The labels applied to the host endpoint.  It is expected that many endpoints share the same labels. For example, they could be used to label all \"production\" workloads with \"deployment=prod\" so that security policy can be applied to production workloads.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"ObjectMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_HostEndpointSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostEndpointSpec contains the specification for a HostEndpoint resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"interfaceName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the linux interface to apply policy to; for example \"eth0\". If \"InterfaceName\" is not present then at least one expected IP must be specified.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"expectedIPs": {
						SchemaProps: spec.SchemaProps{
							Description: "The expected IP addresses (IPv4 and IPv6) of the endpoint. If \"InterfaceName\" is not present, Calico will look for an interface matching any of the IPs in the list and apply policy to that.\n\nNote:\n\tWhen using the selector|tag match criteria in an ingress or egress security Policy\n\tor Profile, Calico converts the selector into a set of IP addresses. For host\n\tendpoints, the ExpectedIPs field is used for that purpose. (If only the interface\n\tname is specified, Calico does not learn the IPs of the interface for use in match\n\tcriteria.)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
									},
								},
							},
						},
					},
					"profiles": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of identifiers of security Profile objects that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports contains the endpoint's named ports, which may be referenced in security policy rules.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort", "github.com/projectcalico/libcalico-go/lib/net.IP"},
	}
}

func schema_libcalico_go_lib_apis_v1_ICMPFields(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ICMPFields defines structure for ICMP and NotICMP sub-struct for ICMP code and type",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"code": {
						SchemaProps: spec.SchemaProps{
							Description: "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v1_IPIPConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "When enabled is true, ipip tunneling will be used to deliver packets to destinations within this pool.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "The IPIP mode.  This can be one of \"always\" or \"cross-subnet\".  A mode of \"always\" will also use IPIP tunneling for routing to destination IP addresses within this pool.  A mode of \"cross-subnet\" will only use IPIP tunneling when the destination node is on a different subnet to the originating node.  The default value (if not specified) is \"always\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v1_IPNAT(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPNat contains a single NAT mapping for a WorkloadEndpoint resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"internalIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The internal IP address which must be associated with the owning endpoint via the configured IPNetworks for the endpoint.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
						},
					},
					"externalIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The external IP address.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
						},
					},
				},
				Required: []string{"internalIP", "externalIP"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/net.IP"},
	}
}

func schema_libcalico_go_lib_apis_v1_IPPool(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPPool contains the details of a Calico IP pool resource. A pool resource is used by Calico in two ways:\n\t- to provide a set of IP addresses from which Calico IPAM assigns addresses\n\t  for workloads.\n\t- to provide configuration specific to IP address range, such as configuration\n\t  for the BGP daemon (e.g. when to use a GRE tunnel to encapsulate packets\n\t  between compute hosts).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolMetadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolSpec"),
						},
					},
				},
				Required: []string{"TypeMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.IPPoolSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_IPPoolList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPPoolList contains a list of IP pool resources.  List types are returned from List() enumerations in the client interface.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPPool"),
									},
								},
							},
						},
					},
				},
				Required: []string{"TypeMetadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.IPPool", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_IPPoolMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPPoolMetadata contains the metadata for an IP pool resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ObjectMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
						},
					},
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
						},
					},
				},
				Required: []string{"ObjectMetadata", "cidr"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata", "github.com/projectcalico/libcalico-go/lib/net.IPNet"},
	}
}

func schema_libcalico_go_lib_apis_v1_IPPoolSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPPoolSpec contains the specification for an IP pool resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ipip": {
						SchemaProps: spec.SchemaProps{
							Description: "Contains configuration for ipip tunneling for this pool. If not specified, then ipip tunneling is disabled for this pool.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration"),
						},
					},
					"nat-outgoing": {
						SchemaProps: spec.SchemaProps{
							Description: "When nat-outgoing is true, packets sent from Calico networked containers in this pool to destinations outside of this pool will be masqueraded.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "When disabled is true, Calico IPAM will not assign addresses from this pool.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration"},
	}
}

func schema_libcalico_go_lib_apis_v1_KubeConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kubeconfig": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"k8sAPIEndpoint": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"k8sKeyFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"k8sCertFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"k8sCAFile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"k8sAPIToken": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"k8sInsecureSkipTLSVerify": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"k8sDisableNodePoll": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"kubeconfig", "k8sAPIEndpoint", "k8sKeyFile", "k8sCertFile", "k8sCAFile", "k8sAPIToken", "k8sInsecureSkipTLSVerify", "k8sDisableNodePoll"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v1_Node(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Node contains the details of a node resource which contains the configuration for a Calico node instance running on a compute host.\n\nIn addition to creating a Node resource through calicoctl or the Calico API, the Calico node instance must also be running on the specific host and should be provided the same Name as that configured on the Node resource.  Note that, by default, the Calico node instance uses the hostname of the compute host when it is not explicitly specified - in this case, the equivalent Node resource should be created using the same hostname as the Name of the Node resource.\n\nOperations on the Node resources is expected to be required when adding a new host into a Calico network, and when removing a host from a Calico network, and occasionally to modify certain configuration.  Care should be taken when operating on Node resources: deleting a Node resource will remove all Node specific data.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.NodeMetadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.NodeSpec"),
						},
					},
				},
				Required: []string{"TypeMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.NodeSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_NodeBGPSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeSpec contains the specification for a Calico Node resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"asNumber": {
						SchemaProps: spec.SchemaProps{
							Description: "The AS Number of the node.  If this is not specified, the global default value will be used.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"ipv4Address": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4Address is the IPv4 address and network of this node.  At least one of the IPv4 and IPv6 addresses should be specified.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
						},
					},
					"ipv6Address": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv6Address is the IPv6 address and network of this node.  At least one of the IPv4 and IPv6 addresses should be specified.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/net.IPNet"},
	}
}

func schema_libcalico_go_lib_apis_v1_NodeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A NodeList contains a list of Node resources.  List types are returned from List() enumerations on the client interface.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Node"),
									},
								},
							},
						},
					},
				},
				Required: []string{"TypeMetadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.Node", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_NodeMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeMetadata contains the metadata for a Calico Node resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ObjectMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the node.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"ObjectMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_NodeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeSpec contains the specification for a Calico Node resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"bgp": {
						SchemaProps: spec.SchemaProps{
							Description: "BGP configuration for this node.  If this omitted, the Calico node will be run in policy-only mode.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.NodeBGPSpec"),
						},
					},
					"orchRefs": {
						SchemaProps: spec.SchemaProps{
							Description: "OrchRefs for this node.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.OrchRef"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.NodeBGPSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1.OrchRef"},
	}
}

func schema_libcalico_go_lib_apis_v1_OrchRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrchRef is used to correlate a Calico node to its corresponding representation in a given orchestrator",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName represents the name for this node according to the orchestrator.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"orchestrator": {
						SchemaProps: spec.SchemaProps{
							Description: "Orchestrator represents the orchestrator using this node.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"orchestrator"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v1_Policy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Policy contains information about a security Policy resource.  This contains a set of security rules to apply.  Security policies allow a selector-based security model which can override the security profiles directly referenced by an endpoint.\n\nEach policy must do one of the following:\n\n \t- Match the packet and apply an \"allow\" action; this immediately accepts the packet, skipping\n       all further policies and profiles. This is not recommended in general, because it prevents\n       further policy from being executed.\n\t- Match the packet and apply a \"deny\" action; this drops the packet immediately, skipping all\n       further policy and profiles.\n\t- Fail to match the packet; in which case the packet proceeds to the next policy. If there\n\t  are no more policies then the packet is dropped.\n\nCalico implements the security policy for each endpoint individually and only the policies that have matching selectors are implemented. This ensures that the number of rules that actually need to be inserted into the kernel is proportional to the number of local endpoints rather than the total amount of policy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.PolicyMetadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.PolicySpec"),
						},
					},
				},
				Required: []string{"TypeMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.PolicyMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.PolicySpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_PolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PolicyList contains a list of selector-based security Policy resources.  List types are returned from List() enumerations on the client interface.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Policy"),
									},
								},
							},
						},
					},
				},
				Required: []string{"TypeMetadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.Policy", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_PolicyMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PolicyMetadata contains the metadata for a selector-based security Policy resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ObjectMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the selector-based security policy.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Arbitrary key-value information to be used by clients.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"ObjectMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_PolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PolicySpec contains the specification for a selector-based security Policy resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"order": {
						SchemaProps: spec.SchemaProps{
							Description: "Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\".",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"),
									},
								},
							},
						},
					},
					"egress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"),
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "The selector is an expression used to pick pick out the endpoints that the policy should be applied to.\n\nSelector expressions follow this syntax:\n\n\tlabel == \"string_literal\"  ->  comparison, e.g. my_label == \"foo bar\"\n\tlabel != \"string_literal\"   ->  not equal; also matches if label is not present\n\tlabel in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is one of \"a\", \"b\", \"c\"\n\tlabel not in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is not one of \"a\", \"b\", \"c\"\n\thas(label_name)  -> True if that label is present\n\t! expr -> negation of expr\n\texpr && expr  -> Short-circuit and\n\texpr || expr  -> Short-circuit or\n\t( expr ) -> parens for grouping\n\tall() or the empty selector -> matches all endpoints.\n\nLabel names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters.\n\nExamples (with made-up labels):\n\n\ttype == \"webserver\" && deployment == \"prod\"\n\ttype in {\"frontend\", \"backend\"}\n\tdeployment != \"dev\"\n\t! has(label_name)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"doNotTrack": {
						SchemaProps: spec.SchemaProps{
							Description: "DoNotTrack indicates whether packets matched by the rules in this policy should go through the data plane's connection tracking, such as Linux conntrack.  If True, the rules in this policy are applied before any data plane connection tracking, and packets allowed by this policy are marked as not to be tracked.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"preDNAT": {
						SchemaProps: spec.SchemaProps{
							Description: "PreDNAT indicates to apply the rules in this policy before any DNAT.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"types": {
						SchemaProps: spec.SchemaProps{
							Description: "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what IngressRules and EgressRules are present in the policy.  The default is:\n\n- [ PolicyTypeIngress ], if there are no EgressRules (including the case where there are\n  also no IngressRules)\n\n- [ PolicyTypeEgress ], if there are EgressRules but no IngressRules\n\n- [ PolicyTypeIngress, PolicyTypeEgress ], if there are both IngressRules and EgressRules.\n\nWhen the policy is read back again, Types will always be one of these values, never empty or nil.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"selector"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"},
	}
}

func schema_libcalico_go_lib_apis_v1_Profile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Profile contains the details a security profile resource.  A profile is set of security rules to apply on an endpoint.  An endpoint (either a host endpoint or an endpoint on a workload) can reference zero or more profiles.  The profile rules are applied directly to the endpoint *after* the selector-based security policy has been applied, and in the order the profiles are declared on the endpoint.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileMetadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileSpec"),
						},
					},
				},
				Required: []string{"TypeMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.ProfileSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_ProfileList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A ProfileList contains a list of security Profile resources.  List types are returned from List() enumerations on the client interface.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Profile"),
									},
								},
							},
						},
					},
				},
				Required: []string{"TypeMetadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.Profile", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_ProfileMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProfileMetadata contains the metadata for a security Profile resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ObjectMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the endpoint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of tags that are applied to each endpoint that references this profile.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "The labels to apply to each endpoint that references this profile.  It is expected that many endpoints share the same labels. For example, they could be used to label all \"production\" workloads with \"deployment=prod\" so that security policy can be applied to production workloads.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"ObjectMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_ProfileSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProfileSpec contains the specification for a security Profile resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"),
									},
								},
							},
						},
					},
					"egress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.Rule"},
	}
}

func schema_libcalico_go_lib_apis_v1_Rule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching.\n\nEach positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"action": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ipVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "IPVersion is an optional field that restricts the rule to only match a specific IP version.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols).\n\nMust be one of these string values: \"tcp\", \"udp\", \"icmp\", \"icmpv6\", \"sctp\", \"udplite\" or an integer in the range 1-255.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
						},
					},
					"icmp": {
						SchemaProps: spec.SchemaProps{
							Description: "ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"icmp\" or \"icmpv6\".",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.ICMPFields"),
						},
					},
					"notProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "NotProtocol is the negated version of the Protocol field.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
						},
					},
					"notICMP": {
						SchemaProps: spec.SchemaProps{
							Description: "NotICMP is the negated version of the ICMP field.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.ICMPFields"),
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "Source contains the match criteria that apply to source entity.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EntityRule"),
						},
					},
					"destination": {
						SchemaProps: spec.SchemaProps{
							Description: "Destination contains the match criteria that apply to destination entity.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EntityRule"),
						},
					},
				},
				Required: []string{"action"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.EntityRule", "github.com/projectcalico/libcalico-go/lib/apis/v1.ICMPFields", "github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"},
	}
}

func schema_libcalico_go_lib_apis_v1_WorkloadEndpoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointMetadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointSpec"),
						},
					},
				},
				Required: []string{"TypeMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpointSpec", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_WorkloadEndpointList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkloadEndpointList contains a list of Workload Endpoint resources.  List types are returned from List() enumerations in the client interface.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpoint"),
									},
								},
							},
						},
					},
				},
				Required: []string{"TypeMetadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.WorkloadEndpoint", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ListMetadata", "github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.TypeMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_WorkloadEndpointMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkloadEndpointMetadata contains the Metadata for a WorkloadEndpoint resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ObjectMetadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"),
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the endpoint.  This may be omitted on a create, in which case an endpoint ID will be automatically created, and the endpoint ID will be included in the response.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workload": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the workload.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"orchestrator": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the orchestrator.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"node": {
						SchemaProps: spec.SchemaProps{
							Description: "The node name identifying the Calico node instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"activeInstanceID": {
						SchemaProps: spec.SchemaProps{
							Description: "ActiveInstanceID is an optional field that orchestrators may use to store additional information about the endpoint. The primary use case is to store a unique identifier for the active instance of a container. For example, with Calico CNI, a re-spawned container may use the same endpoint indexing (Node, Orchestrator, Workload, Endpoint) for the new container as for the old - the ActiveInstanceID is used to store an additional unique ID which the CNI plugin uses to determine whether the DEL operation needs to delete the Calico WorkloadEndpoint. This field is not an index field of the WorkloadEndpoint resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "The labels applied to the workload endpoint.  It is expected that many endpoints share the same labels. For example, they could be used to label all \"production\" workloads with \"deployment=prod\" so that security policy can be applied to production workloads.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"ObjectMetadata"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1/unversioned.ObjectMetadata"},
	}
}

func schema_libcalico_go_lib_apis_v1_WorkloadEndpointSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkloadEndpointMetadata contains the specification for a WorkloadEndpoint resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ipNetworks": {
						SchemaProps: spec.SchemaProps{
							Description: "IPNetworks is a list of subnets allocated to this endpoint. IP packets will only be allowed to leave this interface if they come from an address in one of these subnets.\n\nCurrently only /32 for IPv4 and /128 for IPv6 networks are supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/net.IPNet"),
									},
								},
							},
						},
					},
					"ipNATs": {
						SchemaProps: spec.SchemaProps{
							Description: "IPNATs is a list of 1:1 NAT mappings to apply to the endpoint. Inbound connections to the external IP will be forwarded to the internal IP. Connections initiated from the internal IP will not have their source address changed, except when an endpoint attempts to connect one of its own external IPs. Each internal IP must be associated with the same endpoint via the configured IPNetworks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPNAT"),
									},
								},
							},
						},
					},
					"ipv4Gateway": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4Gateway is the gateway IPv4 address for traffic from the workload.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
						},
					},
					"ipv6Gateway": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv6Gateway is the gateway IPv6 address for traffic from the workload.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.IP"),
						},
					},
					"profiles": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of security Profile resources that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"interfaceName": {
						SchemaProps: spec.SchemaProps{
							Description: "InterfaceName the name of the Linux interface on the host: for example, tap80.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mac": {
						SchemaProps: spec.SchemaProps{
							Description: "MAC is the MAC address of the endpoint interface.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/net.MAC"),
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports contains the endpoint's named ports, which may be referenced in security policy rules.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.EndpointPort", "github.com/projectcalico/libcalico-go/lib/apis/v1.IPNAT", "github.com/projectcalico/libcalico-go/lib/net.IP", "github.com/projectcalico/libcalico-go/lib/net.IPNet", "github.com/projectcalico/libcalico-go/lib/net.MAC"},
	}
}

func schema_libcalico_go_lib_apis_v3_AllocationAttribute(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"handle_id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"secondary": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_AutoHostEndpointConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"autoCreate": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoCreate enables automatic creation of host endpoints for every node. [Default: Disabled]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_BGPConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPConfiguration contains the configuration for any BGP routing.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the BGPConfiguration.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfigurationSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_BGPConfigurationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPConfigurationList contains a list of BGPConfiguration resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfiguration"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPConfiguration", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_BGPConfigurationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPConfigurationSpec contains the values of the BGP configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"logSeverityScreen": {
						SchemaProps: spec.SchemaProps{
							Description: "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: INFO]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeToNodeMeshEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeToNodeMeshEnabled sets whether full node to node BGP mesh is enabled. [Default: true]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"asNumber": {
						SchemaProps: spec.SchemaProps{
							Description: "ASNumber is the default AS number used by a node. [Default: 64512]",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"serviceLoadBalancerIPs": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceLoadBalancerIPs are the CIDR blocks for Kubernetes Service LoadBalancer IPs. Kubernetes Service status.LoadBalancer.Ingress IPs will only be advertised if they are within one of these blocks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceLoadBalancerIPBlock"),
									},
								},
							},
						},
					},
					"serviceExternalIPs": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceExternalIPs are the CIDR blocks for Kubernetes Service External IPs. Kubernetes Service ExternalIPs will only be advertised if they are within one of these blocks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceExternalIPBlock"),
									},
								},
							},
						},
					},
					"serviceClusterIPs": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceClusterIPs are the CIDR blocks from which service cluster IPs are allocated. If specified, Calico will advertise these blocks, as well as any cluster IPs within them.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceClusterIPBlock"),
									},
								},
							},
						},
					},
					"communities": {
						SchemaProps: spec.SchemaProps{
							Description: "Communities is a list of BGP community values and their arbitrary names for tagging routes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Community"),
									},
								},
							},
						},
					},
					"prefixAdvertisements": {
						SchemaProps: spec.SchemaProps{
							Description: "PrefixAdvertisements contains per-prefix advertisement configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.PrefixAdvertisement"),
									},
								},
							},
						},
					},
					"listenPort": {
						SchemaProps: spec.SchemaProps{
							Description: "ListenPort is the port where BGP protocol should listen. Defaults to 179",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.Community", "github.com/projectcalico/libcalico-go/lib/apis/v3.PrefixAdvertisement", "github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceClusterIPBlock", "github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceExternalIPBlock", "github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceLoadBalancerIPBlock"},
	}
}

func schema_libcalico_go_lib_apis_v3_BGPPassword(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPPassword contains ways to specify a BGP password.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secretKeyRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Selects a key of a secret in the node pod's namespace.",
							Ref:         ref("k8s.io/api/core/v1.SecretKeySelector"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretKeySelector"},
	}
}

func schema_libcalico_go_lib_apis_v3_BGPPeer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPPeer contains information about a BGPPeer resource that is a peer of a Calico compute node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the BGPPeer.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeerSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_BGPPeerList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPPeerList contains a list of BGPPeer resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeer"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPeer", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_BGPPeerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BGPPeerSpec contains the specification for a BGPPeer resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"node": {
						SchemaProps: spec.SchemaProps{
							Description: "The node name identifying the Calico node instance that is targeted by this peer. If this is not set, and no nodeSelector is specified, then this BGP peer selects all nodes in the cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector for the nodes that should have this peering.  When this is set, the Node field must be empty.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"peerIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The IP address of the peer followed by an optional port number to peer with. If port number is given, format should be `[<IPv6>]:port` or `<IPv4>:<port>` for IPv4. If optional port number is not set, and this peer IP and ASNumber belongs to a calico/node with ListenPort set in BGPConfiguration, then we use that port to peer.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"asNumber": {
						SchemaProps: spec.SchemaProps{
							Description: "The AS Number of the peer.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"peerSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector for the remote nodes to peer with.  When this is set, the PeerIP and ASNumber fields must be empty.  For each peering between the local node and selected remote nodes, we configure an IPv4 peering if both ends have NodeBGPSpec.IPv4Address specified, and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address specified.  The remote AS number comes from the remote node's NodeBGPSpec.ASNumber, or the global default if that is not set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keepOriginalNextHop": {
						SchemaProps: spec.SchemaProps{
							Description: "Option to keep the original nexthop field when routes are sent to a BGP Peer. Setting \"true\" configures the selected BGP Peers node to use the \"next hop keep;\" instead of \"next hop self;\"(default) in the specific branch of the Node on \"bird.cfg\".",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional BGP password for the peerings generated by this BGPPeer resource.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPassword"),
						},
					},
					"sourceAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies whether and how to configure a source address for the peerings generated by this BGPPeer resource.  Default value \"UseNodeIP\" means to configure the node IP as the source address.  \"None\" means not to configure a source address.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.BGPPassword"},
	}
}

func schema_libcalico_go_lib_apis_v3_BlockAffinity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BlockAffinity maintains a block affinity's state",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the BlockAffinity.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinitySpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinitySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_BlockAffinityList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BlockAffinityList contains a list of BlockAffinity resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinity"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.BlockAffinity", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_BlockAffinitySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BlockAffinitySpec contains the specification for a BlockAffinity resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"node": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"deleted": {
						SchemaProps: spec.SchemaProps{
							Description: "Deleted indicates that this block affinity is being deleted. This field is a string for compatibility with older releases that mistakenly treat this field as a string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"state", "node", "cidr", "deleted"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_ClusterInformation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterInformation contains the cluster specific information.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the ClusterInformation.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformationSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformationSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_ClusterInformationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterInformationList contains a list of ClusterInformation resources (even though there should only be one).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformation"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.ClusterInformation", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_ClusterInformationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterInformationSpec contains the values of describing the cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"clusterGUID": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterGUID is the GUID of the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterType": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterType describes the type of the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"calicoVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "CalicoVersion is the version of Calico that the cluster is running",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"datastoreReady": {
						SchemaProps: spec.SchemaProps{
							Description: "DatastoreReady is used during significant datastore migrations to signal to components such as Felix that it should wait before accessing the datastore.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"variant": {
						SchemaProps: spec.SchemaProps{
							Description: "Variant declares which variant of Calico should be active.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_Community(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Community contains standard or large community value and its name.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name given to community value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Description: "Value must be of format `aa:nn` or `aa:nn:mm`. For standard community use `aa:nn` format, where `aa` and `nn` are 16 bit number. For large community use `aa:nn:mm` format, where `aa`, `nn` and `mm` are 32 bit number. Where, `aa` is an AS Number, `nn` and `mm` are per-AS identifier.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_ControllersConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ControllersConfig enables and configures individual Kubernetes controllers",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"node": {
						SchemaProps: spec.SchemaProps{
							Description: "Node enables and configures the node controller. Enabled by default, set to nil to disable.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NodeControllerConfig"),
						},
					},
					"policy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy enables and configures the policy controller. Enabled by default, set to nil to disable.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.PolicyControllerConfig"),
						},
					},
					"workloadEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "WorkloadEndpoint enables and configures the workload endpoint controller. Enabled by default, set to nil to disable.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointControllerConfig"),
						},
					},
					"serviceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccount enables and configures the service account controller. Enabled by default, set to nil to disable.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceAccountControllerConfig"),
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace enables and configures the namespace controller. Enabled by default, set to nil to disable.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NamespaceControllerConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.NamespaceControllerConfig", "github.com/projectcalico/libcalico-go/lib/apis/v3.NodeControllerConfig", "github.com/projectcalico/libcalico-go/lib/apis/v3.PolicyControllerConfig", "github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceAccountControllerConfig", "github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointControllerConfig"},
	}
}

func schema_libcalico_go_lib_apis_v3_EndpointPort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"name", "protocol", "port"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"},
	}
}

func schema_libcalico_go_lib_apis_v3_EntityRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "An EntityRule is a sub-component of a Rule comprising the match criteria specific to a particular entity (that is either the source or destination).\n\nA source EntityRule matches the source endpoint and originating traffic. A destination EntityRule matches the destination endpoint and terminating traffic.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nets": {
						SchemaProps: spec.SchemaProps{
							Description: "Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched.\n\nNote that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match:\n\n\tSelector = \"!has(my_label)\" matches packets that are from other Calico-controlled\n\tendpoints that do not have the label \"my_label\".\n\n\tNotSelector = \"has(my_label)\" matches packets that are not from Calico-controlled\n\tendpoints that do have the label \"my_label\".\n\nThe effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespaceSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and Selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule.\n\nFor NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy.\n\nFor NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint.\n\nFor GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports.\n\nSince only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
									},
								},
							},
						},
					},
					"notNets": {
						SchemaProps: spec.SchemaProps{
							Description: "NotNets is the negated version of the Nets field.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"notSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"notPorts": {
						SchemaProps: spec.SchemaProps{
							Description: "NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to \"TCP\" or \"UDP\".",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
									},
								},
							},
						},
					},
					"serviceAccounts": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceAccountMatch"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.ServiceAccountMatch", "github.com/projectcalico/libcalico-go/lib/numorstring.Port"},
	}
}

func schema_libcalico_go_lib_apis_v3_FelixConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Felix Configuration contains the configuration for Felix.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the FelixConfiguration.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfigurationSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfigurationSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_FelixConfigurationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FelixConfigurationList contains a list of FelixConfiguration resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfiguration"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.FelixConfiguration", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_FelixConfigurationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FelixConfigurationSpec contains the values of the Felix configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"useInternalDataplaneDriver": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"dataplaneDriver": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ipv6Support": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"routeRefreshInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "RouteRefreshInterval is the period at which Felix re-checks the routes in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable route refresh. [Default: 90s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"interfaceRefreshInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "InterfaceRefreshInterval is the period at which Felix rescans local interfaces to verify their state. The rescan can be disabled by setting the interval to 0.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"iptablesRefreshInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "IptablesRefreshInterval is the period at which Felix re-checks the IP sets in the dataplane to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable IP sets refresh. Note: the default for this value is lower than the other refresh intervals as a workaround for a Linux kernel bug that was fixed in kernel version 4.11. If you are using v4.11 or greater you may want to set this to, a higher value to reduce Felix CPU usage. [Default: 10s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"iptablesPostWriteCheckInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "IptablesPostWriteCheckInterval is the period after Felix has done a write to the dataplane that it schedules an extra read back in order to check the write was not clobbered by another process. This should only occur if another application on the system doesn't respect the iptables lock. [Default: 1s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"iptablesLockFilePath": {
						SchemaProps: spec.SchemaProps{
							Description: "IptablesLockFilePath is the location of the iptables lock file. You may need to change this if the lock file is not in its standard location (for example if you have mapped it into Felix's container at a different path). [Default: /run/xtables.lock]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"iptablesLockTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "IptablesLockTimeout is the time that Felix will wait for the iptables lock, or 0, to disable. To use this feature, Felix must share the iptables lock file with all other processes that also take the lock. When running Felix inside a container, this requires the /run directory of the host to be mounted into the calico/node or calico/felix container. [Default: 0s disabled]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"iptablesLockProbeInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "IptablesLockProbeInterval is the time that Felix will wait between attempts to acquire the iptables lock if it is not available. Lower values make Felix more responsive when the lock is contended, but use more CPU. [Default: 50ms]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"featureDetectOverride": {
						SchemaProps: spec.SchemaProps{
							Description: "FeatureDetectOverride is used to override the feature detection. Values are specified in a comma separated list with no spaces, example; \"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\". \"true\" or \"false\" will force the feature, empty or omitted values are auto-detected.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipsetsRefreshInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "IpsetsRefreshInterval is the period at which Felix re-checks all iptables state to ensure that no other process has accidentally broken Calico's rules. Set to 0 to disable iptables refresh. [Default: 90s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"maxIpsetSize": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"iptablesBackend": {
						SchemaProps: spec.SchemaProps{
							Description: "IptablesBackend specifies which backend of iptables will be used. The default is legacy.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"xdpRefreshInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "XDPRefreshInterval is the period at which Felix re-checks all XDP state to ensure that no other process has accidentally broken Calico's BPF maps or attached programs. Set to 0 to disable XDP refresh. [Default: 90s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"netlinkTimeout": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"metadataAddr": {
						SchemaProps: spec.SchemaProps{
							Description: "MetadataAddr is the IP address or domain name of the server that can answer VM queries for cloud-init metadata. In OpenStack, this corresponds to the machine running nova-api (or in Ubuntu, nova-api-metadata). A value of none (case insensitive) means that Felix should not set up any NAT rule for the metadata path. [Default: 127.0.0.1]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataPort": {
						SchemaProps: spec.SchemaProps{
							Description: "MetadataPort is the port of the metadata server. This, combined with global.MetadataAddr (if not 'None'), is used to set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort. In most cases this should not need to be changed [Default: 8775].",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"openstackRegion": {
						SchemaProps: spec.SchemaProps{
							Description: "OpenstackRegion is the name of the region that a particular Felix belongs to. In a multi-region Calico/OpenStack deployment, this must be configured somehow for each Felix (here in the datamodel, or in felix.cfg or the environment on each compute node), and must match the [calico] openstack_region value configured in neutron.conf on each node. [Default: Empty]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interfacePrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "InterfacePrefix is the interface name prefix that identifies workload endpoints and so distinguishes them from host endpoint interfaces. Note: in environments other than bare metal, the orchestrators configure this appropriately. For example our Kubernetes and Docker integrations set the 'cali' value, and our OpenStack integration sets the 'tap' value. [Default: cali]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interfaceExclude": {
						SchemaProps: spec.SchemaProps{
							Description: "InterfaceExclude is a comma-separated list of interfaces that Felix should exclude when monitoring for host endpoints. The default value ensures that Felix ignores Kubernetes' IPVS dummy interface, which is used internally by kube-proxy. If you want to exclude multiple interface names using a single value, the list supports regular expressions. For regular expressions you must wrap the value with '/'. For example having values '/^kube/,veth1' will exclude all interfaces that begin with 'kube' and also the interface 'veth1'. [Default: kube-ipvs0]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"chainInsertMode": {
						SchemaProps: spec.SchemaProps{
							Description: "ChainInsertMode controls whether Felix hooks the kernel's top-level iptables chains by inserting a rule at the top of the chain or by appending a rule at the bottom. insert is the safe default since it prevents Calico's rules from being bypassed. If you switch to append mode, be sure that the other rules in the chains signal acceptance by falling through to the Calico rules, otherwise the Calico policy will be bypassed. [Default: insert]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"defaultEndpointToHostAction": {
						SchemaProps: spec.SchemaProps{
							Description: "DefaultEndpointToHostAction controls what happens to traffic that goes from a workload endpoint to the host itself (after the traffic hits the endpoint egress policy). By default Calico blocks traffic from workload endpoints to the host itself with an iptables \"DROP\" action. If you want to allow some or all traffic from endpoint to host, set this parameter to RETURN or ACCEPT. Use RETURN if you have your own rules in the iptables \"INPUT\" chain; Calico will insert its rules at the top of that chain, then \"RETURN\" packets to the \"INPUT\" chain once it has completed processing workload endpoint egress policy. Use ACCEPT to unconditionally accept packets from workloads after processing workload endpoint egress policy. [Default: Drop]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"iptablesFilterAllowAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"iptablesMangleAllowAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"logPrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "LogPrefix is the log prefix that Felix uses when rendering LOG rules. [Default: calico-packet]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logFilePath": {
						SchemaProps: spec.SchemaProps{
							Description: "LogFilePath is the full path to the Felix log. Set to none to disable file logging. [Default: /var/log/calico/felix.log]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logSeverityFile": {
						SchemaProps: spec.SchemaProps{
							Description: "LogSeverityFile is the log severity above which logs are sent to the log file. [Default: Info]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logSeverityScreen": {
						SchemaProps: spec.SchemaProps{
							Description: "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logSeveritySys": {
						SchemaProps: spec.SchemaProps{
							Description: "LogSeveritySys is the log severity above which logs are sent to the syslog. Set to None for no logging to syslog. [Default: Info]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipipEnabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"ipipMTU": {
						SchemaProps: spec.SchemaProps{
							Description: "IPIPMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"vxlanEnabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"vxlanMTU": {
						SchemaProps: spec.SchemaProps{
							Description: "VXLANMTU is the MTU to set on the tunnel device. See Configuring MTU [Default: 1440]",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"vxlanPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"vxlanVNI": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"allowVXLANPacketsFromWorkloads": {
						SchemaProps: spec.SchemaProps{
							Description: "AllowVXLANPacketsFromWorkloads controls whether Felix will add a rule to drop VXLAN encapsulated traffic from workloads [Default: false]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowIPIPPacketsFromWorkloads": {
						SchemaProps: spec.SchemaProps{
							Description: "AllowIPIPPacketsFromWorkloads controls whether Felix will add a rule to drop IPIP encapsulated traffic from workloads [Default: false]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"reportingInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "ReportingInterval is the interval at which Felix reports its status into the datastore or 0 to disable. Must be non-zero in OpenStack deployments. [Default: 30s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"reportingTTL": {
						SchemaProps: spec.SchemaProps{
							Description: "ReportingTTL is the time-to-live setting for process-wide status reports. [Default: 90s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"endpointReportingEnabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"endpointReportingDelay": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"iptablesMarkMask": {
						SchemaProps: spec.SchemaProps{
							Description: "IptablesMarkMask is the mask that Felix selects its IPTables Mark bits from. Should be a 32 bit hexadecimal number with at least 8 bits set, none of which clash with any other mark bits in use on the system. [Default: 0xff000000]",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"disableConntrackInvalidCheck": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"healthEnabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"healthHost": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"healthPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"prometheusMetricsEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "PrometheusMetricsEnabled enables the Prometheus metrics server in Felix if set to true. [Default: false]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"prometheusMetricsHost": {
						SchemaProps: spec.SchemaProps{
							Description: "PrometheusMetricsHost is the host that the Prometheus metrics server should bind to. [Default: empty]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prometheusMetricsPort": {
						SchemaProps: spec.SchemaProps{
							Description: "PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. [Default: 9091]",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"prometheusGoMetricsEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "PrometheusGoMetricsEnabled disables Go runtime metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"prometheusProcessMetricsEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "PrometheusProcessMetricsEnabled disables process metrics collection, which the Prometheus client does by default, when set to false. This reduces the number of metrics reported, reducing Prometheus load. [Default: true]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"failsafeInboundHostPorts": {
						SchemaProps: spec.SchemaProps{
							Description: "FailsafeInboundHostPorts is a comma-delimited list of UDP/TCP ports and CIDRs that Felix will allow incoming traffic to host endpoints on irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. Each port should be specified as tcp:<cidr>:<port-number> or udp:<cidr>:<port-number>. For back-compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will default to `0.0.0.0/0`. To disable all inbound host ports, use the value none. The default value allows ssh access and DHCP. [Default: tcp:0.0.0.0/0:22, udp:0.0.0.0/0:68, tcp:0.0.0.0/0:179, tcp:0.0.0.0/0:2379, tcp:0.0.0.0/0:2380, tcp:0.0.0.0/0:6443, tcp:0.0.0.0/0:6666, tcp:0.0.0.0/0:6667]",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ProtoPort"),
									},
								},
							},
						},
					},
					"failsafeOutboundHostPorts": {
						SchemaProps: spec.SchemaProps{
							Description: "FailsafeOutboundHostPorts is a comma-delimited list of UDP/TCP ports and CIDRs that Felix will allow outgoing traffic from host endpoints to irrespective of the security policy. This is useful to avoid accidentally cutting off a host with incorrect configuration. Each port should be specified as tcp:<port-number> or udp:<port-number>. For back-compatibility, if the protocol is not specified, it defaults to \"tcp\". If a CIDR is not specified, it will default to `0.0.0.0/0`. To disable all outbound host ports, use the value none. The default value opens etcd's standard ports to ensure that Felix does not get cut off from etcd as well as allowing DHCP and DNS. [Default: tcp:0.0.0.0/0:179, tcp:0.0.0.0/0:2379, tcp:0.0.0.0/0:2380, tcp:0.0.0.0/0:6443, tcp:0.0.0.0/0:6666, tcp:0.0.0.0/0:6667, udp:0.0.0.0/0:53, udp:0.0.0.0/0:67]",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ProtoPort"),
									},
								},
							},
						},
					},
					"kubeNodePortRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeNodePortRanges holds list of port ranges used for service node ports. Only used if felix detects kube-proxy running in ipvs mode. Felix uses these ranges to separate host and workload traffic. [Default: 30000:32767].",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
									},
								},
							},
						},
					},
					"policySyncPathPrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "PolicySyncPathPrefix is used to by Felix to communicate policy changes to external services, like Application layer policy. [Default: Empty]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"usageReportingEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "UsageReportingEnabled reports anonymous Calico version number and cluster size to projectcalico.org. Logs warnings returned by the usage server. For example, if a significant security vulnerability has been discovered in the version of Calico being used. [Default: true]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"usageReportingInitialDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "UsageReportingInitialDelay controls the minimum delay before Felix makes a report. [Default: 300s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"usageReportingInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "UsageReportingInterval controls the interval at which Felix makes reports. [Default: 86400s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"natPortRange": {
						SchemaProps: spec.SchemaProps{
							Description: "NATPortRange specifies the range of ports that is used for port mapping when doing outgoing NAT. When unset the default behavior of the network stack is used.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Port"),
						},
					},
					"natOutgoingAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "NATOutgoingAddress specifies an address to use when performing source NAT for traffic in a natOutgoing pool that is leaving the network. By default the address used is an address on the interface the traffic is leaving on (ie it uses the iptables MASQUERADE target)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deviceRouteSourceAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "This is the source address to use on programmed device routes. By default the source address is left blank, leaving the kernel to choose the source address used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deviceRouteProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "This defines the route protocol added to programmed device routes, by default this will be RTPROT_BOOT when left blank.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"routeProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "This defines the route protocol added to programmed routes, by default this will be 202 (or 0xCA) when left blank.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"removeExternalRoutes": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether or not to remove device routes that have not been programmed by Felix. Disabling this will allow external applications to also add device routes. This is enabled by default which means we will remove externally added routes.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"externalNodesList": {
						SchemaProps: spec.SchemaProps{
							Description: "ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes which may source tunnel traffic and have the tunneled traffic be accepted at calico nodes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"debugMemoryProfilePath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"debugDisableLogDropping": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"debugSimulateCalcGraphHangAfter": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"debugSimulateDataplaneHangAfter": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"iptablesNATOutgoingInterfaceFilter": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sidecarAccelerationEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "SidecarAccelerationEnabled enables experimental sidecar acceleration [Default: false]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"xdpEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "XDPEnabled enables XDP acceleration for suitable untracked incoming deny rules. [Default: true]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"genericXDPEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "GenericXDPEnabled enables Generic XDP so network cards that don't support XDP offload or driver modes can use XDP. This is not recommended since it doesn't provide better performance than iptables. [Default: false]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bpfEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFEnabled, if enabled Felix will use the BPF dataplane. [Default: false]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bpfDisableUnprivileged": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFDisableUnprivileged, if enabled, Felix sets the kernel.unprivileged_bpf_disabled sysctl to disable unprivileged use of BPF.  This ensures that unprivileged users cannot access Calico's BPF maps and cannot insert their own BPF programs to interfere with Calico's. [Default: true]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bpfLogLevel": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFLogLevel controls the log level of the BPF programs when in BPF dataplane mode.  One of \"Off\", \"Info\", or \"Debug\".  The logs are emitted to the BPF trace pipe, accessible with the command `tc exec bpf debug`. [Default: Off].",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bpfDataIfacePattern": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFDataIfacePattern is a regular expression that controls which interfaces Felix should attach BPF programs to in order to catch traffic to/from the network.  This needs to match the interfaces that Calico workload traffic flows over as well as any interfaces that handle incoming traffic to nodeports and services from outside the cluster.  It should not match the workload interfaces (usually named cali...).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bpfConnectTimeLoadBalancingEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFConnectTimeLoadBalancingEnabled when in BPF mode, controls whether Felix installs the connection-time load balancer.  The connect-time load balancer is required for the host to be able to reach Kubernetes services and it improves the performance of pod-to-service connections.  The only reason to disable it is for debugging purposes.  [Default: true]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bpfExternalServiceMode": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFExternalServiceMode in BPF mode, controls how connections from outside the cluster to services (node ports and cluster IPs) are forwarded to remote workloads.  If set to \"Tunnel\" then both request and response traffic is tunneled to the remote node.  If set to \"DSR\", the request traffic is tunneled but the response traffic is sent directly from the remote node.  In \"DSR\" mode, the remote node appears to use the IP of the ingress node; this requires a permissive L2 network.  [Default: Tunnel]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"bpfKubeProxyIptablesCleanupEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFKubeProxyIptablesCleanupEnabled, if enabled in BPF mode, Felix will proactively clean up the upstream Kubernetes kube-proxy's iptables chains.  Should only be enabled if kube-proxy is not running.  [Default: true]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bpfKubeProxyMinSyncPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFKubeProxyMinSyncPeriod, in BPF mode, controls the minimum time between updates to the dataplane for Felix's embedded kube-proxy.  Lower values give reduced set-up latency.  Higher values reduce Felix CPU usage by batching up more work.  [Default: 1s]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"bpfKubeProxyEndpointSlicesEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFKubeProxyEndpointSlicesEnabled in BPF mode, controls whether Felix's embedded kube-proxy accepts EndpointSlices or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"routeSource": {
						SchemaProps: spec.SchemaProps{
							Description: "RouteSource configures where Felix gets its routing information. - WorkloadIPs: use workload endpoints to construct routes. - CalicoIPAM: the default - use IPAM data to construct routes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routeTableRange": {
						SchemaProps: spec.SchemaProps{
							Description: "Calico programs additional Linux route tables for various purposes.  RouteTableRange specifies the indices of the route tables that Calico should use.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.RouteTableRange"),
						},
					},
					"wireguardEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "WireguardEnabled controls whether Wireguard is enabled. [Default: false]",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"wireguardListeningPort": {
						SchemaProps: spec.SchemaProps{
							Description: "WireguardListeningPort controls the listening port used by Wireguard. [Default: 51820]",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"wireguardRoutingRulePriority": {
						SchemaProps: spec.SchemaProps{
							Description: "WireguardRoutingRulePriority controls the priority value to use for the Wireguard routing rule. [Default: 99]",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"wireguardInterfaceName": {
						SchemaProps: spec.SchemaProps{
							Description: "WireguardInterfaceName specifies the name to use for the Wireguard interface. [Default: wg.calico]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"wireguardMTU": {
						SchemaProps: spec.SchemaProps{
							Description: "WireguardMTU controls the MTU on the Wireguard interface. See Configuring MTU [Default: 1420]",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"awsSrcDstCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "Set source-destination-check on AWS EC2 instances. Accepted value must be one of \"DoNothing\", \"Enabled\" or \"Disabled\". [Default: DoNothing]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceLoopPrevention": {
						SchemaProps: spec.SchemaProps{
							Description: "When service IP advertisement is enabled, prevent routing loops to service IPs that are not in use, by dropping or rejecting packets that do not get DNAT'd by kube-proxy. Unless set to \"Disabled\", in which case such routing loops continue to be allowed. [Default: Drop]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mtuIfacePattern": {
						SchemaProps: spec.SchemaProps{
							Description: "MTUIfacePattern is a regular expression that controls which interfaces Felix should scan in order to calculate the host's MTU. This should not match workload interfaces (usually named cali...).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.ProtoPort", "github.com/projectcalico/libcalico-go/lib/apis/v3.RouteTableRange", "github.com/projectcalico/libcalico-go/lib/numorstring.Port", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_libcalico_go_lib_apis_v3_GlobalNetworkPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalNetworkPolicy contains information about a security Policy resource.  This contains a set of security rules to apply.  Security policies allow a selector-based security model which can override the security profiles directly referenced by an endpoint.\n\nEach policy must do one of the following:\n\n \t- Match the packet and apply an \"allow\" action; this immediately accepts the packet, skipping\n       all further policies and profiles. This is not recommended in general, because it prevents\n       further policy from being executed.\n\t- Match the packet and apply a \"deny\" action; this drops the packet immediately, skipping all\n       further policy and profiles.\n\t- Fail to match the packet; in which case the packet proceeds to the next policy. If there\n\t  are no more policies then the packet is dropped.\n\nCalico implements the security policy for each endpoint individually and only the policies that have matching selectors are implemented. This ensures that the number of rules that actually need to be inserted into the kernel is proportional to the number of local endpoints rather than the total amount of policy.\n\nGlobalNetworkPolicy is globally-scoped (i.e. not Namespaced).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the Policy.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicySpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_GlobalNetworkPolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalNetworkPolicyList contains a list of GlobalNetworkPolicy resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicy"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkPolicy", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_GlobalNetworkPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"order": {
						SchemaProps: spec.SchemaProps{
							Description: "Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\".",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
									},
								},
							},
						},
					},
					"egress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "The selector is an expression used to pick pick out the endpoints that the policy should be applied to.\n\nSelector expressions follow this syntax:\n\n\tlabel == \"string_literal\"  ->  comparison, e.g. my_label == \"foo bar\"\n\tlabel != \"string_literal\"   ->  not equal; also matches if label is not present\n\tlabel in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is one of \"a\", \"b\", \"c\"\n\tlabel not in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is not one of \"a\", \"b\", \"c\"\n\thas(label_name)  -> True if that label is present\n\t! expr -> negation of expr\n\texpr && expr  -> Short-circuit and\n\texpr || expr  -> Short-circuit or\n\t( expr ) -> parens for grouping\n\tall() or the empty selector -> matches all endpoints.\n\nLabel names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters.\n\nExamples (with made-up labels):\n\n\ttype == \"webserver\" && deployment == \"prod\"\n\ttype in {\"frontend\", \"backend\"}\n\tdeployment != \"dev\"\n\t! has(label_name)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"types": {
						SchemaProps: spec.SchemaProps{
							Description: "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress rules are present in the policy.  The default is:\n\n- [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are\n  also no Ingress rules)\n\n- [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules\n\n- [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules.\n\nWhen the policy is read back again, Types will always be one of these values, never empty or nil.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"doNotTrack": {
						SchemaProps: spec.SchemaProps{
							Description: "DoNotTrack indicates whether packets matched by the rules in this policy should go through the data plane's connection tracking, such as Linux conntrack.  If True, the rules in this policy are applied before any data plane connection tracking, and packets allowed by this policy are marked as not to be tracked.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"preDNAT": {
						SchemaProps: spec.SchemaProps{
							Description: "PreDNAT indicates to apply the rules in this policy before any DNAT.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"applyOnForward": {
						SchemaProps: spec.SchemaProps{
							Description: "ApplyOnForward indicates to apply the rules in this policy on forward traffic.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"serviceAccountSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccountSelector is an optional field for an expression used to select a pod based on service accounts.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespaceSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NamespaceSelector is an optional field for an expression used to select a pod based on namespaces.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"},
	}
}

func schema_libcalico_go_lib_apis_v3_GlobalNetworkSet(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalNetworkSet contains a set of arbitrary IP sub-networks/CIDRs that share labels to allow rules to refer to them via selectors.  The labels of GlobalNetworkSet are not namespaced.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the NetworkSet.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSetSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_GlobalNetworkSetList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalNetworkSetList contains a list of NetworkSet resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSet"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.GlobalNetworkSet", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_GlobalNetworkSetSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalNetworkSetSpec contains the specification for a NetworkSet resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nets": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of IP networks that belong to this set.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_HTTPMatch(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HTTPMatch is an optional field that apply only to HTTP requests The Methods and Path fields are joined with AND",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"methods": {
						SchemaProps: spec.SchemaProps{
							Description: "Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"paths": {
						SchemaProps: spec.SchemaProps{
							Description: "Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPPath"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPPath"},
	}
}

func schema_libcalico_go_lib_apis_v3_HTTPPath(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HTTPPath specifies an HTTP path to match. It may be either of the form: exact: <path>: which matches the path exactly or prefix: <path-prefix>: which matches the path prefix",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"exact": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"prefix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_HostEndpoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostEndpoint contains information about a HostEndpoint resource that represents a \"bare-metal\" interface attached to the host that is running Calico's agent, Felix. By default, Calico doesn't apply any policy to such interfaces.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the HostEndpoint.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpointSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_HostEndpointList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostEndpointList contains a list of HostEndpoint resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpoint"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.HostEndpoint", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_HostEndpointSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HostEndpointSpec contains the specification for a HostEndpoint resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"node": {
						SchemaProps: spec.SchemaProps{
							Description: "The node name identifying the Calico node instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"interfaceName": {
						SchemaProps: spec.SchemaProps{
							Description: "Either \"*\", or the name of a specific Linux interface to apply policy to; or empty.  \"*\" indicates that this HostEndpoint governs all traffic to, from or through the default network namespace of the host named by the \"Node\" field; entering and leaving that namespace via any interface, including those from/to non-host-networked local workloads.\n\nIf InterfaceName is not \"*\", this HostEndpoint only governs traffic that enters or leaves the host through the specific interface named by InterfaceName, or - when InterfaceName is empty - through the specific interface that has one of the IPs in ExpectedIPs. Therefore, when InterfaceName is empty, at least one expected IP must be specified.  Only external interfaces (such as \"eth0\") are supported here; it isn't possible for a HostEndpoint to protect traffic through a specific local workload interface.\n\nNote: Only some kinds of policy are implemented for \"*\" HostEndpoints; initially just pre-DNAT policy.  Please check Calico documentation for the latest position.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"expectedIPs": {
						SchemaProps: spec.SchemaProps{
							Description: "The expected IP addresses (IPv4 and IPv6) of the endpoint. If \"InterfaceName\" is not present, Calico will look for an interface matching any of the IPs in the list and apply policy to that. Note:\n\tWhen using the selector match criteria in an ingress or egress security Policy\n\tor Profile, Calico converts the selector into a set of IP addresses. For host\n\tendpoints, the ExpectedIPs field is used for that purpose. (If only the interface\n\tname is specified, Calico does not learn the IPs of the interface for use in match\n\tcriteria.)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"profiles": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of identifiers of security Profile objects that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports contains the endpoint's named ports, which may be referenced in security policy rules.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort"},
	}
}

func schema_libcalico_go_lib_apis_v3_ICMPFields(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ICMPFields defines structure for ICMP and NotICMP sub-struct for ICMP code and type",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"code": {
						SchemaProps: spec.SchemaProps{
							Description: "Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_IPAMBlock(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPAMBlock contains information about a block for IP address assignment.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the IPAMBlock.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlockSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlockSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_IPAMBlockList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPAMBlockList contains a list of IPAMBlock resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlock"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMBlock", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_IPAMBlockSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPAMBlockSpec contains the specification for an IPAMBlock resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"strictAffinity": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"allocations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"integer"},
										Format: "int32",
									},
								},
							},
						},
					},
					"unallocated": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"integer"},
										Format: "int32",
									},
								},
							},
						},
					},
					"attributes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.AllocationAttribute"),
									},
								},
							},
						},
					},
					"deleted": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"cidr", "strictAffinity", "allocations", "unallocated", "attributes"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.AllocationAttribute"},
	}
}

func schema_libcalico_go_lib_apis_v3_IPAMConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPAMConfig contains information about a block for IP address assignment.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the IPAMConfig.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfigSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfigSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_IPAMConfigList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPAMConfigList contains a list of IPAMConfig resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfig"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMConfig", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_IPAMConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPAMConfigSpec contains the specification for an IPAMConfig resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"strictAffinity": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"autoAllocateBlocks": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"maxBlocksPerHost": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxBlocksPerHost, if non-zero, is the max number of blocks that can be affine to each host.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"strictAffinity", "autoAllocateBlocks"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_IPAMHandle(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPAMHandle contains information about an IPAMHandle resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the IPAMHandle.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandleSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandleSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_IPAMHandleList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPAMHandleList contains a list of IPAMHandle resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandle"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.IPAMHandle", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_IPAMHandleSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPAMHandleSpec contains the specification for an IPAMHandle resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"handleID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"block": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"integer"},
										Format: "int32",
									},
								},
							},
						},
					},
					"deleted": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"handleID", "block"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_IPNAT(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPNat contains a single NAT mapping for a WorkloadEndpoint resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"internalIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The internal IP address which must be associated with the owning endpoint via the configured IPNetworks for the endpoint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"externalIP": {
						SchemaProps: spec.SchemaProps{
							Description: "The external IP address.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"internalIP", "externalIP"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_IPPool(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPPool contains information about an IPPool resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the IPPool.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPoolSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_IPPoolList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPPoolList contains a list of IPPool resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPPool"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.IPPool", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_IPPoolSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IPPoolSpec contains the specification for an IPPool resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "The pool CIDR.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vxlanMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Contains configuration for VXLAN tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. VXLAN tunneling is disabled).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipipMode": {
						SchemaProps: spec.SchemaProps{
							Description: "Contains configuration for IPIP tunneling for this pool. If not specified, then this is defaulted to \"Never\" (i.e. IPIP tunneling is disabled).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"natOutgoing": {
						SchemaProps: spec.SchemaProps{
							Description: "When nat-outgoing is true, packets sent from Calico networked containers in this pool to destinations outside of this pool will be masqueraded.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"disabled": {
						SchemaProps: spec.SchemaProps{
							Description: "When disabled is true, Calico IPAM will not assign addresses from this pool.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"blockSize": {
						SchemaProps: spec.SchemaProps{
							Description: "The block size to use for IP address assignments from this pool. Defaults to 26 for IPv4 and 112 for IPv6.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Allows IPPool to allocate for a specific node by label selector.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipip": {
						SchemaProps: spec.SchemaProps{
							Description: "Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration"),
						},
					},
					"nat-outgoing": {
						SchemaProps: spec.SchemaProps{
							Description: "Deprecated: this field is only used for APIv1 backwards compatibility. Setting this field is not allowed, this field is for internal use only.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"cidr"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v1.IPIPConfiguration"},
	}
}

func schema_libcalico_go_lib_apis_v3_KubeControllersConfiguration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeControllersConfiguration contains the configuration for Calico Kubernetes Controllers.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the KubeControllersConfiguration.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfigurationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the KubeControllersConfiguration",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfigurationStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfigurationSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfigurationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_KubeControllersConfigurationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeControllersConfigurationList contains a list of KubeControllersConfiguration resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfiguration"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfiguration", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_KubeControllersConfigurationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeControllersConfigurationSpec contains the values of the Kubernetes controllers configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"logSeverityScreen": {
						SchemaProps: spec.SchemaProps{
							Description: "LogSeverityScreen is the log severity above which logs are sent to the stdout. [Default: Info]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"healthChecks": {
						SchemaProps: spec.SchemaProps{
							Description: "HealthChecks enables or disables support for health checks [Default: Enabled]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"etcdV3CompactionPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "EtcdV3CompactionPeriod is the period between etcdv3 compaction requests. Set to 0 to disable. [Default: 10m]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"prometheusMetricsPort": {
						SchemaProps: spec.SchemaProps{
							Description: "PrometheusMetricsPort is the TCP port that the Prometheus metrics server should bind to. Set to 0 to disable. [Default: 9094]",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"controllers": {
						SchemaProps: spec.SchemaProps{
							Description: "Controllers enables and configures individual Kubernetes controllers",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ControllersConfig"),
						},
					},
				},
				Required: []string{"controllers"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.ControllersConfig", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_libcalico_go_lib_apis_v3_KubeControllersConfigurationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeControllersConfigurationStatus represents the status of the configuration. It's useful for admins to be able to see the actual config that was applied, which can be modified by environment variables on the kube-controllers process.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"runningConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "RunningConfig contains the effective config that is running in the kube-controllers pod, after merging the API resource with any environment variables.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfigurationSpec"),
						},
					},
					"environmentVars": {
						SchemaProps: spec.SchemaProps{
							Description: "EnvironmentVars contains the environment variables on the kube-controllers that influenced the RunningConfig.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.KubeControllersConfigurationSpec"},
	}
}

func schema_libcalico_go_lib_apis_v3_NamespaceControllerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NamespaceControllerConfig configures the service account controller, which syncs Kubernetes service accounts to Calico profiles (only used for etcdv3 datastore).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"reconcilerPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_libcalico_go_lib_apis_v3_NetworkPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkPolicy is the Namespaced-equivalent of the GlobalNetworkPolicy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the Policy.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicySpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicySpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_NetworkPolicyList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkPolicyList contains a list of NetworkPolicy resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicy"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkPolicy", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_NetworkPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"order": {
						SchemaProps: spec.SchemaProps{
							Description: "Order is an optional field that specifies the order in which the policy is applied. Policies with higher \"order\" are applied after those with lower order.  If the order is omitted, it may be considered to be \"infinite\" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \"Name\".",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
									},
								},
							},
						},
					},
					"egress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "The selector is an expression used to pick pick out the endpoints that the policy should be applied to.\n\nSelector expressions follow this syntax:\n\n\tlabel == \"string_literal\"  ->  comparison, e.g. my_label == \"foo bar\"\n\tlabel != \"string_literal\"   ->  not equal; also matches if label is not present\n\tlabel in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is one of \"a\", \"b\", \"c\"\n\tlabel not in { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is not one of \"a\", \"b\", \"c\"\n\thas(label_name)  -> True if that label is present\n\t! expr -> negation of expr\n\texpr && expr  -> Short-circuit and\n\texpr || expr  -> Short-circuit or\n\t( expr ) -> parens for grouping\n\tall() or the empty selector -> matches all endpoints.\n\nLabel names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters.\n\nExamples (with made-up labels):\n\n\ttype == \"webserver\" && deployment == \"prod\"\n\ttype in {\"frontend\", \"backend\"}\n\tdeployment != \"dev\"\n\t! has(label_name)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"types": {
						SchemaProps: spec.SchemaProps{
							Description: "Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress are present in the policy.  The default is:\n\n- [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are\n  also no Ingress rules)\n\n- [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules\n\n- [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules.\n\nWhen the policy is read back again, Types will always be one of these values, never empty or nil.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"serviceAccountSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccountSelector is an optional field for an expression used to select a pod based on service accounts.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"},
	}
}

func schema_libcalico_go_lib_apis_v3_NetworkSet(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkSet is the Namespaced-equivalent of the GlobalNetworkSet.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the NetworkSet.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSetSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSetSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_NetworkSetList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkSetList contains a list of NetworkSet resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSet"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.NetworkSet", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_NetworkSetSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkSetSpec contains the specification for a NetworkSet resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nets": {
						SchemaProps: spec.SchemaProps{
							Description: "The list of IP networks that belong to this set.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_Node(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Node contains information about a Node resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the Node.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NodeSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Node.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NodeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.NodeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_NodeAddress(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeAddress represents an address assigned to a node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "Address is a string representation of the actual address.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"address"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_NodeBGPSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeBGPSpec contains the specification for the Node BGP configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"asNumber": {
						SchemaProps: spec.SchemaProps{
							Description: "The AS Number of the node.  If this is not specified, the global default value will be used.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"ipv4Address": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4Address is the IPv4 address and network of this node.  The IPv4 address should always be specified if you are using BGP.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipv6Address": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv6Address is the IPv6 address and network of this node.  Not required if you are not using BGP or you do not require IPv6 routing.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipv4IPIPTunnelAddr": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4IPIPTunnelAddr is the IPv4 address of the IP in IP tunnel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"routeReflectorClusterID": {
						SchemaProps: spec.SchemaProps{
							Description: "RouteReflectorClusterID enables this node as a route reflector within the given cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_NodeControllerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeControllerConfig configures the node controller, which automatically cleans up configuration for nodes that no longer exist. Optionally, it can create host endpoints for all Kubernetes nodes.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"reconcilerPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"syncLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "SyncLabels controls whether to copy Kubernetes node labels to Calico nodes. [Default: Enabled]",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostEndpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "HostEndpoint controls syncing nodes to host endpoints. Disabled by default, set to nil to disable.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.AutoHostEndpointConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.AutoHostEndpointConfig", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_libcalico_go_lib_apis_v3_NodeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeList contains a list of Node resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Node"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.Node", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_NodeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeSpec contains the specification for a Node resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"bgp": {
						SchemaProps: spec.SchemaProps{
							Description: "BGP configuration for this node.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NodeBGPSpec"),
						},
					},
					"ipv4VXLANTunnelAddr": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4VXLANTunnelAddr is the IPv4 address of the VXLAN tunnel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vxlanTunnelMACAddr": {
						SchemaProps: spec.SchemaProps{
							Description: "VXLANTunnelMACAddr is the MAC address of the VXLAN tunnel.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"orchRefs": {
						SchemaProps: spec.SchemaProps{
							Description: "OrchRefs for this node.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.OrchRef"),
									},
								},
							},
						},
					},
					"wireguard": {
						SchemaProps: spec.SchemaProps{
							Description: "Wireguard configuration for this node.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NodeWireguardSpec"),
						},
					},
					"addresses": {
						SchemaProps: spec.SchemaProps{
							Description: "Addresses list address that a client can reach the node at.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.NodeAddress"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.NodeAddress", "github.com/projectcalico/libcalico-go/lib/apis/v3.NodeBGPSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.NodeWireguardSpec", "github.com/projectcalico/libcalico-go/lib/apis/v3.OrchRef"},
	}
}

func schema_libcalico_go_lib_apis_v3_NodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"wireguardPublicKey": {
						SchemaProps: spec.SchemaProps{
							Description: "WireguardPublicKey is the Wireguard public-key for this node. wireguardPublicKey validates if the string is a valid base64 encoded key.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"podCIDRs": {
						SchemaProps: spec.SchemaProps{
							Description: "PodCIDR is a reflection of the Kubernetes node's spec.PodCIDRs field.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_NodeWireguardSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeWireguardSpec contains the specification for the Node wireguard configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"interfaceIPv4Address": {
						SchemaProps: spec.SchemaProps{
							Description: "InterfaceIPv4Address is the IPv4 address for the Wireguard interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_OrchRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrchRef is used to correlate a Calico node to its corresponding representation in a given orchestrator",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodeName": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeName represents the name for this node according to the orchestrator.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"orchestrator": {
						SchemaProps: spec.SchemaProps{
							Description: "Orchestrator represents the orchestrator using this node.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"orchestrator"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_PolicyControllerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PolicyControllerConfig configures the network policy controller, which syncs Kubernetes policies to Calico policies (only used for etcdv3 datastore).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"reconcilerPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_libcalico_go_lib_apis_v3_PrefixAdvertisement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PrefixAdvertisement configures advertisement properties for the specified CIDR.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "CIDR for which properties should be advertised.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"communities": {
						SchemaProps: spec.SchemaProps{
							Description: "Communities can be list of either community names already defined in `Specs.Communities` or community value of format `aa:nn` or `aa:nn:mm`. For standard community use `aa:nn` format, where `aa` and `nn` are 16 bit number. For large community use `aa:nn:mm` format, where `aa`, `nn` and `mm` are 32 bit number. Where,`aa` is an AS Number, `nn` and `mm` are per-AS identifier.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_Profile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Profile contains the details a security profile resource.  A profile is set of security rules to apply on an endpoint.  An endpoint (either a host endpoint or an endpoint on a workload) can reference zero or more profiles.  The profile rules are applied directly to the endpoint *after* the selector-based security policy has been applied, and in the order the profiles are declared on the endpoint.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the Profile.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ProfileSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.ProfileSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_ProfileList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProfileList contains a list of Profile resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Profile"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.Profile", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_ProfileSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProfileSpec contains the specification for a security Profile resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
									},
								},
							},
						},
					},
					"egress": {
						SchemaProps: spec.SchemaProps{
							Description: "The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"),
									},
								},
							},
						},
					},
					"labelsToApply": {
						SchemaProps: spec.SchemaProps{
							Description: "An option set of labels to apply to each endpoint (in addition to their own labels) referencing this profile.  If labels configured on the endpoint have keys matching those labels inherited from the profile, the endpoint label values take precedence.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.Rule"},
	}
}

func schema_libcalico_go_lib_apis_v3_ProtoPort(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProtoPort is combination of protocol, port, and CIDR. All three must be specified.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"net": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"protocol", "port", "net"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_RouteTableRange(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"min": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"max": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"min", "max"},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_Rule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching.\n\nEach positive match criteria has a negated version, prefixed with \"Not\". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"action": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ipVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "IPVersion is an optional field that restricts the rule to only match a specific IP version.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Description: "Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols).\n\nMust be one of these string values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\", \"UDPLite\" or an integer in the range 1-255.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
						},
					},
					"icmp": {
						SchemaProps: spec.SchemaProps{
							Description: "ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to \"ICMP\" or \"ICMPv6\".",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ICMPFields"),
						},
					},
					"notProtocol": {
						SchemaProps: spec.SchemaProps{
							Description: "NotProtocol is the negated version of the Protocol field.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"),
						},
					},
					"notICMP": {
						SchemaProps: spec.SchemaProps{
							Description: "NotICMP is the negated version of the ICMP field.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.ICMPFields"),
						},
					},
					"source": {
						SchemaProps: spec.SchemaProps{
							Description: "Source contains the match criteria that apply to source entity.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EntityRule"),
						},
					},
					"destination": {
						SchemaProps: spec.SchemaProps{
							Description: "Destination contains the match criteria that apply to destination entity.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EntityRule"),
						},
					},
					"http": {
						SchemaProps: spec.SchemaProps{
							Description: "HTTP contains match criteria that apply to HTTP requests.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPMatch"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata contains additional information for this rule",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.RuleMetadata"),
						},
					},
				},
				Required: []string{"action"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.EntityRule", "github.com/projectcalico/libcalico-go/lib/apis/v3.HTTPMatch", "github.com/projectcalico/libcalico-go/lib/apis/v3.ICMPFields", "github.com/projectcalico/libcalico-go/lib/apis/v3.RuleMetadata", "github.com/projectcalico/libcalico-go/lib/numorstring.Protocol"},
	}
}

func schema_libcalico_go_lib_apis_v3_RuleMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is a set of key value pairs that give extra information about the rule",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_ServiceAccountControllerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceAccountControllerConfig configures the service account controller, which syncs Kubernetes service accounts to Calico profiles (only used for etcdv3 datastore).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"reconcilerPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_libcalico_go_lib_apis_v3_ServiceAccountMatch(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"names": {
						SchemaProps: spec.SchemaProps{
							Description: "Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_ServiceClusterIPBlock(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceClusterIPBlock represents a single allowed ClusterIP CIDR block.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_ServiceExternalIPBlock(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceExternalIPBlock represents a single allowed External IP CIDR block.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_ServiceLoadBalancerIPBlock(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceLoadBalancerIPBlock represents a single allowed LoadBalancer IP CIDR block.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_libcalico_go_lib_apis_v3_WorkloadEndpoint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkloadEndpoint contains information about a WorkloadEndpoint resource that is a peer of a Calico compute node.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the WorkloadEndpoint.",
							Ref:         ref("github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpointSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_WorkloadEndpointControllerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkloadEndpointControllerConfig configures the workload endpoint controller, which syncs Kubernetes labels to Calico workload endpoints (only used for etcdv3 datastore).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"reconcilerPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "ReconcilerPeriod is the period to perform reconciliation with the Calico datastore. [Default: 5m]",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_libcalico_go_lib_apis_v3_WorkloadEndpointList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkloadEndpointList contains a list of WorkloadEndpoint resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpoint"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.WorkloadEndpoint", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_libcalico_go_lib_apis_v3_WorkloadEndpointSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WorkloadEndpointMetadata contains the specification for a WorkloadEndpoint resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"orchestrator": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the orchestrator.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workload": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the workload.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"node": {
						SchemaProps: spec.SchemaProps{
							Description: "The node name identifying the Calico node instance.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerID": {
						SchemaProps: spec.SchemaProps{
							Description: "The container ID.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pod": {
						SchemaProps: spec.SchemaProps{
							Description: "The Pod name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "The Endpoint name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipNetworks": {
						SchemaProps: spec.SchemaProps{
							Description: "IPNetworks is a list of subnets allocated to this endpoint. IP packets will only be allowed to leave this interface if they come from an address in one of these subnets. Currently only /32 for IPv4 and /128 for IPv6 networks are supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ipNATs": {
						SchemaProps: spec.SchemaProps{
							Description: "IPNATs is a list of 1:1 NAT mappings to apply to the endpoint. Inbound connections to the external IP will be forwarded to the internal IP. Connections initiated from the internal IP will not have their source address changed, except when an endpoint attempts to connect one of its own external IPs. Each internal IP must be associated with the same endpoint via the configured IPNetworks.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.IPNAT"),
									},
								},
							},
						},
					},
					"ipv4Gateway": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv4Gateway is the gateway IPv4 address for traffic from the workload.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ipv6Gateway": {
						SchemaProps: spec.SchemaProps{
							Description: "IPv6Gateway is the gateway IPv6 address for traffic from the workload.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"profiles": {
						SchemaProps: spec.SchemaProps{
							Description: "A list of security Profile resources that apply to this endpoint. Each profile is applied in the order that they appear in this list.  Profile rules are applied after the selector-based security policy.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"interfaceName": {
						SchemaProps: spec.SchemaProps{
							Description: "InterfaceName the name of the Linux interface on the host: for example, tap80.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mac": {
						SchemaProps: spec.SchemaProps{
							Description: "MAC is the MAC address of the endpoint interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ports": {
						SchemaProps: spec.SchemaProps{
							Description: "Ports contains the endpoint's named ports, which may be referenced in security policy rules.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/projectcalico/libcalico-go/lib/apis/v3.EndpointPort", "github.com/projectcalico/libcalico-go/lib/apis/v3.IPNAT"},
	}
}

func schema_projectcalico_libcalico_go_lib_numorstring_Port(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Port represents either a range of numeric ports or a named port.\n\n    - For a named port, set the PortName, leaving MinPort and MaxPort as 0.\n    - For a port range, set MinPort and MaxPort to the (inclusive) port numbers.  Set\n      PortName to \"\".\n    - For a single port, set MinPort = MaxPort and PortName = \"\".",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"minPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"maxPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"portName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"portName"},
			},
		},
	}
}

func schema_projectcalico_libcalico_go_lib_numorstring_Protocol(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"numVal": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "byte",
						},
					},
					"strVal": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "numVal", "strVal"},
			},
		},
	}
}

func schema_projectcalico_libcalico_go_lib_numorstring_Uint8OrString(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UInt8OrString is a type that can hold an uint8 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"numVal": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "byte",
						},
					},
					"strVal": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "numVal", "strVal"},
			},
		},
	}
}
